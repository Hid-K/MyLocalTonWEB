#!/usr/bin/env fift -s
"TonUtil.fif" include

{ ."usage: " @' $0 type ."<prvkey> <src-addr> <dest-addr> <seqno> <amount> <comment> <send-mode> <savefile>" cr 1 halt
} : usage
$# dup 8 <> ' usage if

true constant bounce

$1 parse-int 256 u>B =: prvkey
$2 parse-smc-addr =: src_bounce 2=: src_addr
$3 parse-smc-addr =: dest_bounce 2=: dest_addr
$4 parse-int =: seqno
$5 $>GR =: amount
$6 =: comment
$7 parse-int constant send-mode  // mode for SENDRAWMSG: +1 - sender pays fees, +2 - ignore errors
$8 =: query-boc-file

."Source wallet address = " src_addr 2dup .addr cr 6 .Addr cr
."Destin wallet address = " dest_addr 2dup .addr cr 6 .Addr cr

comment simple-transfer-body constant body-cell

."Transferring " amount .GR cr
."to account " dest_addr 2dup dest_bounce 7 + .Addr ." = " .addr cr
."from account " src_addr 2dup src_bounce 7 + .Addr ." = " .addr cr
."seqno=" seqno . cr
."bounce=" bounce . cr
."Body of transfer message is " body-cell <s csr. cr
  
// create a message
<b b{01} s, bounce 1 i, b{000100} s, dest_addr addr, amount Gram, 0 9 64 32 + + 1+ u,
 body-cell <s 2dup 1 s-fits-with? not rot over 1 i, -rot { drop body-cell ref, } { s, } cond
b> =: gram_msg

<b seqno 32 u, send-mode 8 u, gram_msg ref, b> =: msg
."signing message: " msg <s csr. cr

msg hashu prvkey ed25519_sign_uint =: signature
."signature of message: " signature Bx. cr cr

<b b{1000100} s, src_addr addr, 0 Gram, b{00} s,
   signature B, 
   msg <s s, 
b> =: external_msg
."resulting external message to send: " external_msg <s csr. cr
."resulting external message to send(boc in hex): " external_msg 2 boc+>B dup Bx. cr
query-boc-file tuck B>file
."(Saved to file " type .")" cr
